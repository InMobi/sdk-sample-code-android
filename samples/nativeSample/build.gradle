apply plugin: 'com.android.application'
apply plugin: 'jacoco'

project.ext {
    rxJavaVersion = "2.1.0"
    rxAndroidVersion = "2.0.1"
}

android {
    compileSdkVersion build_versions.target_sdk
    buildToolsVersion build_versions.build_tools
    defaultConfig {
        applicationId "com.inmobi.inmobinativesample"
        minSdkVersion build_versions.min_sdk
        targetSdkVersion build_versions.target_sdk
        versionCode build_versions.appVersionCode
        versionName build_versions.appVersionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    dataBinding {
        enabled = true
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    sourceSets {
        androidTest.java.srcDirs += "src/test-common/java"
        test.java.srcDirs += "src/test-common/java"
    }
    lintOptions {
        lintConfig rootProject.file('lint.xml')
    }
    testOptions {
        unitTests.returnDefaultValues = true
    }
}

jacoco {
    toolVersion = "0.7.4+"
}

dependencies {
    //InMobiAds
    implementation deps.inMobi.ads

    //Support Design
    implementation deps.support.app_compat
    implementation deps.support.recyclerview
    implementation deps.support.cardview
    implementation deps.support.design
    implementation deps.constraint_layout

    // Dagger core
    annotationProcessor deps.dagger.compiler
    implementation deps.dagger.runtime

    // Dagger Android
    implementation deps.dagger.android
    implementation deps.dagger.android_support
    annotationProcessor deps.dagger.android_support_compiler

    // ReactiveX
    implementation deps.rxjava2
    implementation deps.rx_android

    // Lifecycle
    implementation deps.lifecycle.runtime
    implementation deps.lifecycle.extensions
    implementation deps.lifecycle.java8
    annotationProcessor deps.lifecycle.compiler

    implementation deps.picasso

    //Leak Canary for Debug
    debugImplementation deps.leakCanary

    testImplementation deps.junit
    testImplementation(deps.arch_core.testing, {
        exclude group: 'com.android.support', module: 'support-compat'
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude group: 'com.android.support', module: 'support-core-utils'
    })
    testImplementation deps.mockito.core

    androidTestImplementation deps.support.app_compat
    androidTestImplementation deps.support.recyclerview
    androidTestImplementation deps.support.cardview
    androidTestImplementation deps.support.design

    androidTestImplementation(deps.espresso.core, {
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude group: 'com.google.code.findbugs', module: 'jsr305'
    })
    androidTestImplementation(deps.espresso.contrib, {
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude group: 'com.google.code.findbugs', module: 'jsr305'
    })

    debugImplementation deps.leakCanary


    androidTestImplementation(deps.arch_core.testing, {
    })
    androidTestImplementation deps.dexmaker
    androidTestImplementation deps.mockito.core, { exclude group: 'net.bytebuddy' }

}


configurations.all { config ->
    if (config.name.contains('UnitTest')) {
        config.resolutionStrategy.eachDependency { details ->
            if (details.requested.group == 'com.squareup.leakcanary' && details.requested.name == 'leakcanary-android') {
                details.useTarget(group: details.requested.group, name: 'leakcanary-android-no-op', version: details.requested.version)
            }
        }
    }
}
task fullCoverageReport(type: JacocoReport) {
    dependsOn 'createDebugCoverageReport'
    dependsOn 'testDebugUnitTest'
    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*',
                      '**/*Test*.*', 'android/**/*.*',
                      '**/*_MembersInjector.class',
                      '**/Dagger*Component.class',
                      '**/Dagger*Component$Builder.class',
                      '**/*_*Factory.class',
                      '**/*ComponentImpl.class',
                      '**/*SubComponentBuilder.class']
    def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"

    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree])
    executionData = fileTree(dir: "$buildDir", includes: [
            "jacoco/testDebugUnitTest.exec",
            "outputs/code-coverage/connected/*coverage.ec"
    ])
}



